namespace Jaegs
	class DefaultDictionary<of TKey, TValue> inherits Dictionary<of TKey, TValue>
		"""
		A child class of dictionary. When retrieving a value from the dictionary,
		if the key is not present, a value generated by defaultFactory will be inserted
		and returned to the called.
		"""
		cue init(defaultFactory as Func<of TValue>)
			base.init
			_defaultFactory = defaultFactory

		cue init(dict as IDictionary<of TKey, TValue>, defaultFactory as Func<of TValue>)
			base.init(dict)
			_defaultFactory = defaultFactory

		cue init(comparer as IEqualityComparer<of TKey>, defaultFactory as Func<of TValue>)
			base.init(comparer)
			_defaultFactory = defaultFactory

		cue init(capacity as int, defaultFactory as Func<of TValue>)
			base.init(capacity)
			_defaultFactory = defaultFactory
			
		cue init(dict as IDictionary<of TKey, TValue>, 
				comparer as IEqualityComparer<of TKey>, 
				defaultFactory as Func<of TValue>)
			base.init(dict, comparer)
			_defaultFactory = defaultFactory

		cue init(capacity as int, comparer as IEqualityComparer<of TKey>, defaultFactory as Func<of TValue>)
			base.init(capacity, comparer)
			_defaultFactory = defaultFactory
						
		var _defaultFactory as Func<of TValue>

		pro defaultFactory from var

		pro [key as TKey] as TValue
			get
				val as TValue
				if .tryGetValue(key, out val), return val
				val = _defaultFactory()
				base[key] = val
				return val
			set
				base[key] = value

		#def tryGetValue(key as TKey?, val as out TValue?) as bool is new 
		#	require key
		#	val = this[key to !]
		#	return true

	class TestDefaultDictionary
		"""
		Examples taken from
		from http://docs.python.org/library/collections.html#collections.DefaultDictionary.default_factory

		The typing of Pair detracts from the example a little bit, but DefaultDictionary is useful
		if you need to make a dictionary of counters or lists.
		"""
		
		test
			#Count occurance of each letter in 'mississippi'
			s = 'mississippi'
			dd = DefaultDictionary<of char, int>(do = 0)
			for k in s, dd[k] += 1 #note conciseness

			expected = [Pair<of char, int>(c'i', 4), 
						Pair<of char, int>(c'p', 2), 
						Pair<of char, int>(c's', 4), 
						Pair<of char, int>(c'm', 1)]
			for key, val in dd
				assert expected.contains(Pair<of char, int>(key, val))

		test
			# make a dictionary of lists
			lst = [Pair<of String, int>('yellow', 1),
					Pair<of String, int>('blue', 2),
					Pair<of String, int>('yellow', 3), 
					Pair<of String, int>('blue', 4), 
					Pair<of String, int>('red', 1)]

			dd = DefaultDictionary<of String, IList<of int>>(do = List<of int>())
			for k, v in lst, dd[k].add(v) #note conciseness

			expected = [ Pair<of String, List<of int>>('blue', [2, 4]), 
						Pair<of String, List<of int>>('red', [1]),
						Pair<of String, List<of int>>('yellow', [1, 3])]
			for key, val in dd
				assert expected.contains(Pair<of String, List<of int>>(key, val))

		/#test
			#tryGetValue
			dd = DefaultDictionary<of int, int>(do = 5)
			ans as int
			res = dd.tryGetValue(10, out ans)
			assert res
			assert ans == 5
			dd[6] = 4
			res = dd.tryGetValue(6, out ans)
			assert res
			assert ans == 6
			assert false #/
						
		def main
			pass
