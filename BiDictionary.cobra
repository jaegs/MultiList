namespace Jaegs
	class BiDictionary<of TKey, TValue> implements IDictionary<of TKey, TValue>
		"""
		A BiDictionary is very similar to a regular Dictionary except that the
		keys and values have a one-to-one relationship.
		For every key, there is exactly one value.
		For every value, there is exactly one key.
		The advantage being that reverse lookups (value -> key) are now possible.
		The .inverse method returns a BiDictionary view of the current BiDictionary
		where the key set becomes the value set and the value set becomes the key set.
		"""

		var _forward as Dictionary<of TKey, TValue>
		var _reverse as Dictionary<of TValue, TKey>

		cue init
			base.init
			_forward = Dictionary<of TKey, TValue>()
			_reverse = Dictionary<of TValue, TKey>()

		cue init(dict as IDictionary<of TKey, TValue>)
			.init
			_addDict(dict)

		cue init(capacity as int)
			base.init
			_forward = Dictionary<of TKey, TValue>(capacity)
			_reverse = Dictionary<of TValue, TKey>(capacity)

		cue init(capacity as int,
				keyComparer as IEqualityComparer<of TKey>, 
				valueComparer as IEqualityComparer<of TValue>)
			base.init
			_forward = Dictionary<of TKey, TValue>(capacity, keyComparer)
			_reverse = Dictionary<of TValue, TKey>(capacity, valueComparer)

		cue init(keyComparer as IEqualityComparer<of TKey>, valueComparer as IEqualityComparer<of TValue>)
			.init(4, keyComparer, valueComparer)

		cue init(other as BiDictionary<of TValue, TKey>) is private
			""" View constructor used in .inverse """
			base.init
			_forward = other._reverse
			_reverse = other._forward

		get count as int
			return _forward.count

		get isReadOnly as bool
			return false

		pro [key as TKey] as TValue
			"""
			If the value is already contained within another key-value pair,
			an InvalidOperationException will be thrown so as to not violate the
			one-to-one invariant.
			Consider using .forcePut to first remove the existing key-value pair
			"""
			get
				return _forward[key]
			set
				if _reverse.containsKey(value)
					if _reverse[value] == key
						assert _forward[key] == value
						return
					throw InvalidOperationException("Cannot insert value [value] for key [key] since [value] " _
						+ "is already paired with [_reverse[value]]")	
				if _forward.containsKey(key)
					#Remove the exisiting value -> key mapping in _reverse
					#before setting up the new mapping
					diffValue = _forward[key]
					assert _reverse[diffValue] == key
					_reverse.remove(diffValue)
				_forward[key] = value
				_reverse[value] = key
		

		get keys as ICollection<of TKey>
			return _forward.keys

		get values as ICollection<of TValue>
			return _reverse.keys

		def forceSet(key as TKey, val as TValue)
			"""
			Sets the key and value pair in all cases.
			If the value is contained within an existing pair,
			the existing pair is first removed.
			"""
			if _reverse.containsKey(val) and _reverse[val] <> key
				diffKey = _reverse[val]
				assert _forward[diffKey] == val
				_forward.remove(diffKey)
				_reverse.remove(val)
			this[key] = val

		def inverse as BiDictionary<of TValue, TKey>
			"""
			Returns an inverse view of the current BiDictionary
			such that the original key set is now the value set
			and the value set is now the key set.
			Since the BiDictionary returned is a view, changes made
			will appear in the original BiDictionary.
			"""
			return BiDictionary<of TValue, TKey>(this)

		def add(kvp as KeyValuePair<of TKey, TValue>)
			.add(kvp.key, kvp.value)
		
		def add(key as TKey, val as TValue)
			require
				not _forward.containsKey(key)
				not _reverse.containsKey(val)
			body
				_forward[key] = val
				_reverse[val] = key

		def _addDict(dict as IDictionary<of TKey, TValue>)
			if dict.count <> Set<of TValue>(dict.values).count
				throw InvalidOperationException("Input dictionary is not a one-to-one mapping")
			.addAll(dict)

		def addAll(kvps as KeyValuePair<of TKey, TValue>*)
			for k, v in kvps, .add(k,v)
			
		def clear
			_reverse.clear
			_forward.clear

		def contains(kvp as KeyValuePair<of TKey, TValue>) as bool
			return (_forward to IDictionary<of TKey, TValue>).contains(kvp)

		def containsKey(key as TKey) as bool
			return _forward.containsKey(key)

		def copyTo(array as KeyValuePair<of TKey, TValue>[]?, arrayIndex as int) 
			(_forward to IDictionary<of TKey, TValue>).copyTo(array, arrayIndex)

		def getEnumerator as IEnumerator<of KeyValuePair<of TKey, TValue>>
			return _forward.getEnumerator

		def getEnumerator as System.Collections.IEnumerator
			implements System.Collections.IEnumerable
			return .getEnumerator to System.Collections.IEnumerator

		def remove(key as TKey) as bool
			if not _forward.containsKey(key), return false
			val = _forward[key]
			assert _reverse[val] == key
			_forward.remove(key)
			_reverse.remove(val)
			return true

		def remove(kvp as KeyValuePair<of TKey, TValue>) as bool
			if not (_forward to IDictionary<of TKey, TValue>).contains(kvp), return false
			assert _reverse[kvp.value] == kvp.key
			_forward.remove(kvp.key)
			_reverse.remove(kvp.value)
			return true

		def tryGetValue(key as TKey, val as out TValue) as bool
			return _forward.tryGetValue(key, out val)

	
		
	class TestBiDictionary
		def main
			pass

		test indexer
			bd = BiDictionary<of int, String>()
			bd[1] = 'hi'
			assert bd[1] == 'hi'
			bd[1] = 'hi' #should be no-op
			expect InvalidOperationException, bd[2] = 'hi'
			bd[1] = 'hello'
			assert bd[1] == 'hello'
			bd[2] = 'hi'
			assert bd[2] == 'hi'

		test forceSet
			bd = BiDictionary<of int, String>()
			bd[1] = 'hi'
			bd.forceSet(2, 'hi')
			assert not bd.containsKey(1)
			assert bd[2] == 'hi'

		test inverse
			bd = BiDictionary<of int, String>()
			bd[1] = 'hi'
			bd[2] = 'hello'
			inv = bd.inverse
			assert inv['hi'] == 1
			assert inv['hello'] == 2

		test remove
			bd = BiDictionary<of int, String>()
			assert not bd.remove(1)
			bd[1] = 'hi'
			assert bd.remove(1)
		

		
